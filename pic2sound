#!/usr/bin/env ruby
# Generate audio from a image file
# This is intended for making sound effects for games

require 'zlib'

# Read a standard ppm file
Zlib::GzipReader.open 'test.ppm.gz' do |f|
  # Skip the header and comment lines
  header = f.gets
  raise "Only the P6 image format is supported" unless header == "P6\n"
  comment = f.gets
  # The width and height
  @width, @height = f.gets.split(/\s+/).map &:to_i
  depth = f.gets.to_i

  @data = f.read(@width * @height * 3)
end

# Frequency of the output file
OUTPUT_FREQUENCY = 44100.0

# Desired output duration in seconds
OUTPUT_DURATION = 3

# Number of audio samples to output for each column in the image
columns_per_second = @width.to_f / OUTPUT_DURATION
SAMPLES_PER_COLUMN = (OUTPUT_FREQUENCY / columns_per_second).round

# Fetch data at that position in the image
def get x, y
  @data[3*y*@width+x*3].ord
end

# Convert a -1..1 float into a 16 bit signed short
def to_16bit a
  a *= 32767
  a = a.round

  # clip
  a = 32767 if a > 32767
  a = -32767 if a < -32767

  # round
  [a, a].pack('s<s<')
end

# Generate a sine way for the given position
def sine_wave freq, pos
  Math.sin(2 * Math::PI * pos / (OUTPUT_FREQUENCY / freq))
end

def y_to_freq y
  max = Math.log(4000, 2) # 4000Hz is nearly the highest note on the piano
  min = Math.log(30, 2)   # 30Hz is near the lowest note on the piano
  # normalize to 0..1
  i = y.to_f / (@height-1)

  # inverse (so that the top of the image will be high notes)
  i = 1.0 - i

  # convert to min..max
  i *= max - min
  i += min

  # convert to frequency
  2**i
end

output = String.new
@width.times do |x|
  freqs = []

  @height.times do |y|
    pixel = get(x, y)
    next unless pixel == 0
    freqs << y_to_freq(y)
  end

  SAMPLES_PER_COLUMN.times do |i|
    pos = x * SAMPLES_PER_COLUMN + i
    res = 0.0
    freqs.each do |freq|
      # Quiet it down to avoid clipping
      strength = 0.3

      res += sine_wave(freq, pos) * strength
    end
    output << to_16bit(res)
  end
end

IO.popen 'aplay -f cd -t raw', 'wb' do |io|
  io.write output
end
